module ch.fhnw.fregels.AppM where

import Control.concurrent.STM(TVar(), atomically)
import Control.monad.State(StateT(), State(), runStateT, promote)
import Control.monad.trans.EitherT(EitherT(EitherT), left)
import Control.monad.trans.MonadTrans(lift)
import Compiler.types.Global (Global, Options, SubSt)
import Data.HashMap(HashMap())

import ch.fhnw.fregels.messages.GeneralLspTypes (URI)
import ch.fhnw.fregels.compile.CompileOptions(defaultLogFile)

--- Our global app transformer
type AppM       = EitherT ServerError AppStateM
type AppStateM  = StateT ServerState IO

runAppM :: ServerState -> AppM a -> IO (ServerResult a, ServerState)
runAppM st env = runStateT (EitherT.run env) st

instance Monad AppStateM => MonadFail AppM where
  fail = EitherT . return . Left . Error

accessM :: (ServerState -> a) -> AppM a
accessM accessor = lift $ fmap accessor StateT.get

-- State

data ServerState = ServerState { 
  rootPath           :: Maybe URI 
, globals            :: TVar (HashMap URI Global)
, waitForCompilation :: TVar Bool
, projectGlobal      :: Maybe Global
, logFilePath        :: String
}

type ServerResult a = (ServerError | a)
data ServerError = Error String

initialState :: IO ServerState
initialState = do 
  globals             <- atomically $ TVar.new empty
  waitForCompilation  <- atomically $ TVar.new False
  pure ServerState {
    rootPath           = Nothing
  , globals            = globals
  , waitForCompilation = waitForCompilation
  , projectGlobal      = Nothing
  , logFilePath        = defaultLogFile
  }



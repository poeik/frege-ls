module ch.fhnw.fregels.effects.MonadSystem where

import Control.monad.trans.MonadIO(MonadIO(liftIO))
import Control.monad.trans.EitherT(EitherT())

import ch.fhnw.fregels.AppM(AppM, AppStateM)

class Monad m => MonadSystem m where
  systemExit :: () -> m ()

instance (Monad AppStateM) => MonadSystem AppM where
  systemExit _ = liftIO $ System.exit 0

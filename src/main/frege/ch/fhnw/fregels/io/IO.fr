module ch.fhnw.fregels.io.IO where

import Java.Util(Path)
import Java.IO as JIO()

import ch.fhnw.fregels.rpc.Rpc(encodeMessage, extractMessageLength)
import ch.fhnw.fregels.messages.MessageTypes(ServerMessage)
import Control.monad.trans.MonadIO(MonadIO, liftIO)


pure native fromChars "new java.lang.String" :: JArray Char -> String

sendServerMessage :: (MonadIO m) => ServerMessage -> m ()
sendServerMessage = liftIO . println . encodeMessage

readMessage :: IO (Int, String)
readMessage = do
  header     <- getLine
  _          <- getLine
  let length = extractMessageLength header
  message    <- readChars length
  pure $ (length, message)

readChars :: Int -> IO String
readChars amt = do
  arr    <- newArray amt
  let offset = 0
  length <- stdin.read arr offset amt
  msg    <- readonly fromChars arr
  -- We receive a chunk of bytes not chars, meaning the array we allocate 
  -- is too big when any character is a non ASCII-symbol. We therefore process 
  -- the message delete remaining null characters.
  pure $ (packed . filter nonNulls . unpacked) msg
  where
    nonNulls = (/=) '\u0000'

pure native fileToPath toPath :: File -> Path
native filesCreateFile "java.nio.file.Files.createFile" :: Path -> IO Path throws IOException
native filesExists "java.nio.file.Files.exists" :: Path -> IO Bool

createFile :: String -> IO Bool
createFile uri = do
    let file = JIO.File.new uri
    let path = fileToPath file
    exists <- filesExists path
    if exists then pure True
    else do
      JIO.stderr.println $ show file.getParentFile
      parentExists <- case file.getParentFile of
        Just parent -> parent.mkdirs
        otherwise -> pure True

      JIO.stderr.println $ show parentExists
      filesCreateFile $ path
      pure True
  `catch` 
    \(e :: IOException) -> do 
      JIO.stderr.println $ show e.getMessage
      pure False

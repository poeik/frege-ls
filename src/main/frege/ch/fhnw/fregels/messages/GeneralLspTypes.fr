module ch.fhnw.fregels.messages.GeneralLspTypes where

import Compiler.types.Global(Global())
import Compiler.types.Packs(Pack())
import Data.JSON(FromJSON(fromJSON), ToJSON(toJSON), Value(Struct, Number, String), field)

data TextDocument = TextDocument {
  uri :: URI
}
derive Show TextDocument

data TextDocumentItem = TextDocumentItem {
  uri         :: URI
, languageId  :: String
, version     :: FileVersion
, text        :: String
}
derive Show TextDocumentItem

data FileVersion = FileVersion Int
derive Show FileVersion
derive Eq FileVersion

data Location = Location {
  uri   :: URI 
, range :: Range
}

derive Show Location

data Range = Range {
  start :: Position
, end   :: Position
}
derive Eq Range
derive Show Range

data Position = Position {
  line      :: Int
, character :: Int
}

derive Show Position
derive Eq Position

{-
  How LSP handles its URIs: taken from the 
  [LSP documentation](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#uri)

  foo://example.com:8042/over/there?name=ferret#nose
  \_/   \______________/\_________/ \_________/ \__/
   |           |            |            |        |
scheme     authority       path        query   fragment
   |   _____________________|__
  / \ /                        \
  urn:example:animal:ferret:nose
-}

data URISyntaxException = native java.net.URISyntaxException where
  pure native getMessage :: URISyntaxException -> String

derive Exceptional URISyntaxException 

data URI = private URI { path :: String } where  
  fromGlobal   :: Global -> URI
  fromGlobal global = fromString global.options.source
  fromPackage :: URI -> Global -> Pack -> (String | URI)
  fromPackage (URI root) g p 
    | p.raw == "" -> Left "Cannot create URI from empty package"
    | otherwise   -> pure $ fromString path 
    where 
      path = concat [root, "/", head g.sourcePath, replaceDotWithSlash (Global.unpack g p), ".fr"] 
      replaceDotWithSlash s = s.replace '.' '/'
  empty :: URI 
  empty = URI ""
  fromString      :: String -> URI
  fromString path  = case unpacked path of
        'f':'i':'l':'e':':':'/':'/': uri -> fromString $ packed uri
        '/': _ -> URI $ path
        uri    -> URI . packed $ '/' : uri

derive Show URI 
derive Eq URI

data MarkupContent = MarkupContent {
  kind  :: MarkupKind
, value :: String
}
derive Show MarkupContent
derive Eq MarkupContent

data MarkupKind = PlainText | Markdown
derive Show MarkupKind
derive Eq MarkupKind

-------------  FromJSON instances ------------- 

instance FromJSON URI where
  fromJSON (String uri) = pure $ URI.fromString uri
  fromJSON garbage = fail ("couldn't decode URI from: " ++ show garbage)

instance FromJSON TextDocument where
  fromJSON (Struct as) = TextDocument <$> field "uri" as
  fromJSON garbage = fail ("couldn't decode TextDocument from: " ++ show garbage)

instance FromJSON FileVersion where
  fromJSON (Number version) = pure $ FileVersion (read version)
  fromJSON garbage = fail ("couldn't decode TextDocument from: " ++ show garbage)

instance FromJSON TextDocumentItem where
  fromJSON (Struct as) =
    TextDocumentItem
      <$> field "uri" as
      <*> field "languageId" as
      <*> field "version" as
      <*> field "text" as
  fromJSON garbage = fail ("couldn't decode TextDocumentItem from: " ++ show garbage)

instance FromJSON Location where
  fromJSON (Struct as) =
    Location 
      <$> field "uri" as
      <*> field "range" as
  fromJSON garbage = fail ("couldn't decode Location from: " ++ show garbage)

instance FromJSON Position where
  fromJSON (Struct as) = do
    -- the Frege Compiler uses 1 based characters & lines 
    -- LSP 0 based.
    -- We transform it here to forget about it.
    line      <- fmap (+1) $ field "line" as
    character <- fmap (+1) $ field "character" as
    pure Position { line, character  }
  fromJSON garbage = fail ("couldn't decode Position from: " ++ show garbage)

instance FromJSON Range where
  fromJSON (Struct as) =
    Range
      <$> field "start" as
      <*> field "end" as
  fromJSON garbage = fail ("couldn't decode Range from: " ++ show garbage)

------------- ToJSON instances ------------- 

instance ToJSON URI where
  toJSON uri = String $ withFileScheme uri.path
    where 
      withFileScheme = (++) "file://" 

instance ToJSON Location where
  toJSON Location { uri, range } =
    Struct [ ("uri", toJSON uri)
           , ("range", toJSON range)
           ]

instance ToJSON Position where
  toJSON Position { line, character } =
    -- the Frege Compiler uses 1 based characters & lines 
    -- LSP 0 based.
    -- We transform it here to forget about it.
    Struct [ ("line",      toJSON $ line - 1)
           , ("character", toJSON $ character - 1)
           ]

instance ToJSON Range where
  toJSON Range { start, end } =
    Struct [ ("start", toJSON start)
           , ("end",   toJSON end)
           ]

instance ToJSON MarkupContent where
  toJSON MarkupContent { kind, value } =
    Struct [ ("kind",  toJSON kind)
           , ("value", toJSON value)
           ]

instance ToJSON MarkupKind where
  toJSON PlainText = toJSON "plaintext"
  toJSON Markdown  = toJSON "markdown"

instance ToJSON FileVersion where
  toJSON (FileVersion version) = Number $ show version

module ch.fhnw.fregels.messages.GeneralLspTypesSpec where

import ch.fhnw.fregels.compile.FakeCompileGlobal(fakeCompileGlobal)
import ch.fhnw.fregels.messages.GeneralLspTypes(URI(), Position(Position))
import ch.fhnw.fregels.utils.Testing(failWith)

import Compiler.types.Packs(Pack())
import Data.JSON(fromJSON, toJSON, Value(String, Struct, Number))
import Test.QuickCheck(Property, once, property, ==>, Arbitrary, choose, sized)

-- URI CTOR tests --

p_UriFromScheme :: Property
p_UriFromScheme = 
  let
    baseUri  = "/Users/xxx/workspaces/fregeproj/src/main/frege/ch/fhnw/mypackage/MyFregeFile.fr"
    fileScheme = "file://"
    uri    = URI.fromString $ fileScheme ++ baseUri
  in
    once $ uri.path == baseUri

p_RelativeUri :: Property
p_RelativeUri = 
  let
    baseUri  = "Users/xxx/workspaces/fregeproj/src/main/frege/ch/fhnw/mypackage/MyFregeFile.fr"
    uri    = URI.fromString $ baseUri
  in
    once $ uri.path == "/" ++ baseUri

p_fromGlobal :: Property
p_fromGlobal = do
    let global = fakeCompileGlobal.{options <- _.{ source = "/helloworld" }}

    let expected = "/helloworld"
    let actual   = URI.fromGlobal global
    once $ expected == actual.path

p_UriFromValidPackage :: Property
p_UriFromValidPackage =
    let 
      root   = URI.fromString "/path/to"
      global = fakeCompileGlobal.{options <- _.{ sourcePath = ["src/main/frege/"] }}
      pack   = Pack.new "my.path.to.FregeModule"

      expected = "/path/to/src/main/frege/my/path/to/FregeModule.fr"
    in
      case URI.fromPackage root global pack of
        (Right actual) -> once $ expected == actual.path
        (Left err)     -> failWith err 

p_UriFromInvalidPackage :: Property
p_UriFromInvalidPackage =
    let 
      root = URI.fromString "/path/to/src"
      pack = Pack.new ""
    in
      case URI.fromPackage root fakeCompileGlobal pack of
        (Right actual) -> failWith "Could create URI from invalid package!"
        (Left err)     -> once $ err == "Cannot create URI from empty package"

-- URI fromJSON/toJSON instances

p_UriFromJSON :: Property
p_UriFromJSON = 
  let
     path = "/my/path/to/file.fr"
     fileScheme = "file://"
     parsed  = fromJSON $ String (fileScheme ++ path) :: Either String URI
  in
    case parsed of
      Right uri -> once $ uri.path == path
      Left err -> failWith err

-- Position fromJSON/toJSON instances

p_UriFromJSONToJSON :: Property
p_UriFromJSONToJSON = property $ \path ->
  path != "" && !(path.startsWith "/") ==> 
      let 
        uri     = URI.fromString path
        parsed  = (fromJSON . toJSON $ uri) :: Either String URI
      in
        case parsed of
          Right uri -> uri.path == "/" ++ path
          Left err -> False

instance Arbitrary Position where
  arbitrary = sized $ \n -> 
    Position <$> choose (0, n) <*> choose (0, n)
  shrink Position { line, character } =
       [ Position l' character  | l' <- shrink line      ]
    ++ [ Position line  c'      | c' <- shrink character ]

p_PositionToJSONFromJSON :: Property
p_PositionToJSONFromJSON = property $ \(initial :: Position) ->
  let
     parsed  = (fromJSON . toJSON $ initial)
  in
    case parsed of
      Right actual -> initial == actual
      Left err -> False

p_PositionFromJSON :: Property
p_PositionFromJSON = property $ \(position :: Position) ->
  let
     json = Struct [
              ("line"     ,  Number $ show position.line), 
              ("character",  Number $ show position.character)
            ]

     expected = position.{line <- (+1)}.{character <- (+1)}
     parsed  = (fromJSON json) :: Either String Position
  in
    case parsed of
      Right actual -> actual == expected
      Left err -> False

p_PositionToJSON :: Property
p_PositionToJSON = property $ \(position :: Position) ->
  let
     json = Struct [
              ("line"     ,  Number $ show (position.line - 1)), 
              ("character",  Number $ show (position.character - 1))
            ]

     parsed  = toJSON position
  in
    parsed == json

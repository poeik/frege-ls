module ch.fhnw.fregels.messages.textdocument.completion.CompletionSpec where

import Test.QuickCheck(Property, once, morallyDubiousIOProperty, ==>, property)

import ch.fhnw.fregels.messages.textdocument.completion.Completion(processCompletionRequest)
import ch.fhnw.fregels.messages.textdocument.completion.CompletionTypes(CompletionRequestParams(CompletionRequestParams), CompletionContext(CompletionContext))
import ch.fhnw.fregels.messages.GeneralLspTypes(URI())
import ch.fhnw.fregels.app.TestAppM(TestAppM(), TestEnv(TestEnv), initializeEnvironment)
import ch.fhnw.fregels.utils.Testing(compileFiles, expectRight)
import ch.fhnw.fregels.utils.DummyTestingValues as DV()

completionRequestParams :: CompletionRequestParams
completionRequestParams = CompletionRequestParams {
  context      = Just $ CompletionContext { triggerCharacter = Just "." }
, textDocument = DV.aTextDocument
, position     = DV.aPosition
}

initialEnvironment :: TestEnv (Maybe a)
initialEnvironment = initializeEnvironment Nothing

p_ShouldNotReturnCompletionsWithWrongTriggerChar :: Property
p_ShouldNotReturnCompletionsWithWrongTriggerChar = property $ \str ->
  str /= (Just ".") ==> 
    let
      params = completionRequestParams.{ context = (Just CompletionContext { triggerCharacter = str }) }
      (result, _) = TestAppM.run initialEnvironment $ processCompletionRequest params
    in
     expectRight result $ (\r -> r.items == [])

p_ShouldWaitForCompilation :: Property
p_ShouldWaitForCompilation =
    let
      (_, env) = TestAppM.run initialEnvironment $ processCompletionRequest completionRequestParams
    in
     once $ 
       env.waitingForCompilationCalls == 1

-- We need to compile a file to proper test this and thus use a morallyDubiousIOProperty
p_ShouldReturnCompletionResultForRecord :: Property
p_ShouldReturnCompletionResultForRecord = morallyDubiousIOProperty $ do
  newEnv        <- compileFiles [file] initialEnvironment
  -- prepare the completion request params
  let dotPos       = DV.aPosition.{ line = 4, character = 7 }
  let textDocument = DV.aTextDocument.{ uri = URI.fromString file }
  let params       = completionRequestParams.{ position = dotPos, textDocument = textDocument }

  -- run the actual code
  (result, _) = TestAppM.run newEnv $ processCompletionRequest params

  pure . once $ expectRight result $ (\r -> 
         r.isIncomplete == False 
      && r.items.length == 3 
    )
  where
    file = "./src/main/resources/test/completion/RecordCompletionExample.fr"

p_ShouldReturnCompletionResultForModule :: Property
p_ShouldReturnCompletionResultForModule = morallyDubiousIOProperty $ do
  newEnv <- compileFiles files initialEnvironment
  -- prepare the completion request params
  let dotPos       = DV.aPosition.{ line = 3, character = 8 }
  let textDocument = DV.aTextDocument.{ uri = URI.fromString (head $ reverse files) }
  let params       = completionRequestParams.{ position = dotPos, textDocument = textDocument }

  -- run the actual code
  (result, _) = TestAppM.run newEnv $ processCompletionRequest params

  pure . expectRight result $ (\r -> 
         r.isIncomplete == False 
      && r.items.length == 1 
    )
  where
    files = [
        "src/main/resources/test/completion/ModuleCompletion1.fr"
      , "src/main/resources/test/completion/ModuleCompletion2.fr"
     ]

module ch.fhnw.fregels.utils.Testing where

import Compiler.types.Global(Global())
import Data.HashMap(HashMap(), union, values, keys)
import Test.QuickCheck(Property, once, morallyDubiousIOProperty)

import ch.fhnw.fregels.compile.CompileMakeMode(compileMake)
import ch.fhnw.fregels.compile.CompileGlobal(standardCompileGlobal)
import ch.fhnw.fregels.compile.CompileOptions(standardCompileOptions)
import ch.fhnw.fregels.app.TestAppM(TestEnv())
import ch.fhnw.fregels.messages.GeneralLspTypes(URI())

{-- Fails a test on `Left` and prints an error to the console -}
expectRight :: Either String r -> (r -> Bool) -> Property
expectRight (Right r) p  = once $ p r
expectRight (Left msg) _ = 
  failWith $ "Expected `Right`, but was `Left` with message: " ++ msg

{-- Fails a test on `Right` and prints an error to the console -}
expectLeft :: Either e r -> (e -> Bool) -> Property
expectLeft (Left e) p  = once $ p e
expectLeft (Right _) _ = failWith $ "Expected `Left`, but was `Right`"

{-- Fails a test and prints an error to the console -}
failWith :: String -> Property
failWith msg = morallyDubiousIOProperty do
  println $ "TEST failed: " ++ msg
  pure . once $ False

{-- 
  Compiles all given file paths. Files must be located in `src/main/resources/test/ 

  Example: 
  ```frege
  compileFiles files currentEnvironment

  files = [
      "src/main/resources/test/completion/ModuleCompletion1.fr"
    , "src/main/resources/test/completion/ModuleCompletion2.fr"
   ]
  ```
-}
compileFiles :: [String] -> TestEnv a -> IO (TestEnv a)
compileFiles files initial = foldM compileOne initial files
 where
  compileOne :: TestEnv a -> String -> IO (TestEnv a)
  compileOne env file = do
    compileGlobal    <- CompileGlobal.fromOptions standardCompileOptions.{sourcePath = [ "src/main/resources/test/" ] }
    -- let's compile the file
    fileGlobals   <- compileMake file compileGlobal
    let kv        = map (\g -> (URI.fromGlobal g, g)) fileGlobals
        newbies   = HashMap.fromList kv
    pure env.{ globals <- (union newbies) }

module ch.fhnw.fregels.utils.Utils where

import Compiler.types.Global(Global(), Symbol)
import Compiler.types.Tokens(Token())
import Data.HashMap(HashMap(), keys)
import Data.List(find)

import ch.fhnw.fregels.messages.GeneralLspTypes(Position(), URI())

hush :: Either e a -> Maybe a
hush (Right a) = Just a
hush (Left _)  = Nothing

note :: MonadFail m => String -> Maybe a -> m a
note _ (Just a) = pure a
note e Nothing  = fail e

asFail :: (MonadFail m) => Either String a -> m a
asFail (Right a) = pure a
asFail (Left e) = fail e

tokenAt :: MonadFail m => Position -> Global -> m Token
tokenAt position global =
  let tokens = global.sub.toks.toList in
  note ("No token found at position" ++ show position) $ find findTokenAt tokens 
  where
    findTokenAt :: Token -> Bool
    findTokenAt t =
      position.line == t.line
      && position.character < (t.col + (length t.value)) 
      && position.character >= t.col

joinedBy :: [String] -> String -> String
joinedBy [] _ = ""
joinedBy (a:as) c = a ++ c ++ as `joinedBy` c

findGlobal :: (MonadFail m) => URI -> HashMap URI Global -> m Global
findGlobal uri globals = note msg $ globals.lookup uri
  where 
    msg = "No global for " ++ show uri ++ " in (" ++ (show . keys) globals ++") found"

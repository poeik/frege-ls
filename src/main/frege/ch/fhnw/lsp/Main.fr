module ch.fhnw.lsp.Main where

import ch.fhnw.lsp.logger.Logger
import ch.fhnw.lsp.rpc.Rpc
import ch.fhnw.lsp.rpc.Request
import ch.fhnw.lsp.rpc.Response

pure native fromChars "new java.lang.String" :: JArray Char -> String

main []             = startLsp swallowLog
main (filePath : _) = do
     logger     <- getFileLogger filePath
     let log = printWriterLog logger
     startLsp log
     
startLsp :: Logger -> IO ()
startLsp log = do
 log "Started Frege LSP"
 forever (mainLoop log)
      `catch` eof log
      `finally` log "Shutting down Frege LSP"
    where
      mainLoop :: Logger -> IO ()
      mainLoop log = loop 
        where 
          loop = do 
            (length, newMessage) <- readMessage
            log $ 
              "Received message:\nlength: " ++ show length ++ "\nmessage: "++ newMessage
            let result = processMessage newMessage
      
            case result of 
              Right response -> case response of
                                  InitializeResponse msg = log msg
              Left err -> log $ "An error occured: " ++ err
            loop
      eof :: Logger -> EOFException -> IO ()
      eof log e = log $ "an error occured" ++ e.getMessage

processMessage :: String -> Either String Response
processMessage message = do
  request <- decodeMessage message
  handleMessage request
  where 
    handleMessage :: Request -> Either String Response
    handleMessage msg = 
      case msg of
        InitializeRequest _ p -> processInitializeMessage p
    
processInitializeMessage :: InitializeRequestParams -> Either String Response
processInitializeMessage (InitializeRequestParams processId) = pure $ InitializeResponse (show processId)

sendResponse :: Response -> IO ()
sendResponse msg = println "sent"

readMessage :: IO (Int, String)
readMessage = do
  header     <- getLine
  _          <- getLine
  let length = extractMessageLength header
  message    <- readChars length
  pure $ (length, message)

readChars :: Int -> IO String
readChars amt = do
  arr <- newArray amt
  let offset = 0
  length <- stdin.read arr offset amt
  readonly fromChars arr

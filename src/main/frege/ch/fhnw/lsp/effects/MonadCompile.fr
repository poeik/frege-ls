module ch.fhnw.lsp.effects.MonadCompile where

import Compiler.types.Global(Global())
import Control.monad.trans.MonadIO(MonadIO(liftIO))
import Data.HashMap(fromList, lookup)

import ch.fhnw.lsp.compile.CompileExecutorLSP(compileMakeLSP, compileMakeLSPInMemory)
import ch.fhnw.lsp.effects.MonadLog(MonadLog(logInfo))
import ch.fhnw.lsp.effects.MonadGlobals(MonadGlobals(projectGlobal, readGlobals, addGlobals))
import ch.fhnw.lsp.AppM(runAppM, AppM, AppStateM, ServerState())
import ch.fhnw.lsp.messages.GeneralLspTypes(URI())

class MonadCompile m where
  compileFile             :: URI -> m (Maybe Global)
  compileInMemory         :: String -> URI -> m (Maybe Global)

instance (Monad AppStateM) => MonadCompile AppM where
  compileFile uriToCompile = do
    exists <- fileExists uriToCompile
    if exists then do 
      logInfo $ "Compiling: " ++ uriToCompile.path
      pglobal <- projectGlobal ()
      newGlobals <- case pglobal of
        Just g -> liftIO $ compileMakeLSP uriToCompile.path g
        Nothing -> pure []
      updateURIGlobals newGlobals uriToCompile
    else do
      logInfo $ "File \"" ++ uriToCompile.path ++ "\" does not exist"
      pure Nothing
    where 
      fileExists uri = liftIO file.exists
        where 
          file = File.new uri.path
    compileInMemory sourceCodeToCompile belongingUri = do
      maybeProjectGlobal <- projectGlobal ()
      case maybeProjectGlobal of 
        Just projectGlobal -> do
          newGlobals <- liftIO $ compileMakeLSPInMemory belongingUri.path sourceCodeToCompile projectGlobal
          updateURIGlobals newGlobals belongingUri
        Nothing -> pure Nothing

updateURIGlobals :: (
    MonadLog     m
  , MonadGlobals m
  ) => [Global] -> URI -> m (Maybe Global)
updateURIGlobals newGlobals openedUri = do
    logInfo $ "Adding " ++ show newGlobals.length ++ " globals: " ++ (show (map (URI.fromGlobal) newGlobals))
    let kv = map (\g -> (URI.fromGlobal g, g)) newGlobals
    let globalsMap = fromList kv
    addGlobals globalsMap
    updated <- readGlobals ()
    pure $ lookup openedUri updated

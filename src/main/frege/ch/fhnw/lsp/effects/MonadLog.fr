module ch.fhnw.lsp.effects.MonadLog where

import Control.monad.trans.MonadIO(MonadIO(liftIO))
import Control.monad.trans.EitherT(EitherT)

import ch.fhnw.lsp.AppM(AppM, AppStateM)
import ch.fhnw.lsp.logger.Logger(getFileLogger, printWriterLog, Logger)
import ch.fhnw.lsp.compile.CompileOptions(defaultLogFile)

---  Our logging effect
class Monad m => MonadLog m where
  logInfo :: String -> m ()

instance (Monad AppStateM) => MonadLog AppM where
  logInfo msg = do 
    logger <- liftIO $ getFileLogger defaultLogFile
    let log = printWriterLog logger
    liftIO $ log msg

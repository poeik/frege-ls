module ch.fhnw.lsp.effects.MonadSendMessage where

import Control.monad.trans.MonadIO(MonadIO(liftIO))
import Control.monad.State(StateT())
import Control.monad.trans.EitherT(EitherT())
import Control.monad.trans.MonadTrans(lift)

import ch.fhnw.lsp.messages.MessageTypes(ServerMessage)
import ch.fhnw.lsp.rpc.Rpc(encodeMessage)

--- This effect enables to send a message from the server to the client 
class Monad m => MonadSendMessage m where
  sendServerMessage :: ServerMessage -> m ()

instance (MonadIO m) => MonadSendMessage (StateT s m) where
  sendServerMessage :: (MonadIO m) => ServerMessage -> StateT s m ()
  sendServerMessage = liftIO . println . encodeMessage

instance (MonadSendMessage m) => MonadSendMessage (EitherT e m) where
  sendServerMessage :: (MonadSendMessage m) => ServerMessage -> EitherT e m ()
  sendServerMessage = lift . sendServerMessage

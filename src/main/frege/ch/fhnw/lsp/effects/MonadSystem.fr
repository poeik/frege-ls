module ch.fhnw.lsp.effects.MonadSystem where

import Control.monad.State(StateT())
import Control.monad.trans.MonadIO(MonadIO(liftIO))
import Control.monad.trans.MonadTrans(lift)
import Control.monad.trans.EitherT(EitherT())

class Monad m => MonadSystem m where
  systemExit :: m ()

instance (MonadIO m) => MonadSystem (StateT s m) where
  systemExit = liftIO $ System.exit 0

instance (MonadSystem m) => MonadSystem (EitherT e m) where
  systemExit = lift systemExit

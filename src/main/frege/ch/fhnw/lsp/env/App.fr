module ch.fhnw.lsp.env.App where

import Control.monad.trans.EitherT(EitherT, left)
import Control.monad.State(StateT(), State(), runStateT, promote)
import ch.fhnw.lsp.env.LspState(ServerError, LspState, asServerResult, report, ServerResult)

type AppResult m a = Monad m => EitherT ServerError m a

liftToApp :: Monad m => ServerResult a -> AppResult m a
liftToApp (Right a)  = pure a
liftToApp (Left err) = left err

runApp :: Monad m => LspState -> AppResult (StateT LspState m) a -> m (ServerResult a, LspState)
runApp st env = runStateT (EitherT.run env) st

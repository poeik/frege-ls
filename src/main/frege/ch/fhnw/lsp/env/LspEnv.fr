module ch.fhnw.lsp.env.LspEnv where

import Control.monad.trans.EitherT
import Control.monad.trans.MonadTrans as MT()
import Control.monad.trans.MonadIO as M()
import Control.monad.State

import Data.HashMap

initialState = LspState {
  rootPath = "",
  files    = empty
}

data LspFile = File {
  content :: String 
}

data LspState = LspState { 
  rootPath :: String 
, files    :: HashMap String LspFile
}

type LspEnv m a = Monad m => EitherT String (StateT LspState m) a

liftState :: Monad m => State LspState a -> LspEnv m a
liftState st = MT.lift (promote st)

liftEither :: Monad m => Either String a -> LspEnv m a
liftEither (Right a)  = pure a
liftEither (Left err) = left err

liftIO :: IO a -> LspEnv IO a
liftIO = M.liftIO

liftMonad :: Monad m => m a -> LspEnv m a
liftMonad = MT.lift . MT.lift

get :: Monad m => LspEnv m LspState
get = MT.lift $ StateT.get

put :: Monad m => LspState -> LspEnv m ()
put = MT.lift . StateT.put

modify :: Monad m => (LspState -> LspState) -> LspEnv m ()
modify = MT.lift . StateT.modify

runLspEnv :: Monad m => LspState -> LspEnv m a -> m (Either String a, LspState)
runLspEnv st env = runStateT (EitherT.run env) st


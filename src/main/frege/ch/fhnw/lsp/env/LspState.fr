module ch.fhnw.lsp.env.LspState where

import ch.fhnw.lsp.messages.GeneralLspTypes (URI)
import Data.HashMap
import Compiler.types.Global (Global, Options, SubSt)
import ch.fhnw.lsp.logger.Logger
import Control.concurrent.STM

type ServerResult a = (ServerError | a)
data ServerError = Error String

initialState :: Monad m => Logger m -> IO (LspState m)
initialState logger = do 
  globals             <- atomically $ TVar.new empty
  waitForCompilation  <- atomically $ TVar.new False
  pure LspState {
    rootPath           = report "No root path provided"
  , globals            = globals
  , waitForCompilation = waitForCompilation
  , projectGlobal      = Nothing
  , logger             = logger
  }

data LspState m = LspState { 
  rootPath           :: ServerResult URI 
, globals            :: TVar (HashMap URI Global)
, waitForCompilation :: TVar Bool
, projectGlobal      :: Maybe Global
, logger             :: Logger m
}

report :: String -> ServerResult a
report = Left . Error

asServerResult :: (String | a) -> ServerResult a
asServerResult (Right a) = Right a
asServerResult (Left e)  = report e

setGlobals :: Monad m => HashMap URI Global -> LspState m -> IO ()
setGlobals newGlobals st = do
  atomically $ st.globals.write newGlobals

updateGlobals :: Monad m => HashMap URI Global -> LspState m -> IO ()
updateGlobals newGlobals st = atomically $ do
    values  <- st.globals.read
    let result = union newGlobals values
    st.globals.write result

setWaitForCompilation :: Bool -> LspState IO -> IO ()
setWaitForCompilation wait st = atomically $
    st.waitForCompilation.write wait

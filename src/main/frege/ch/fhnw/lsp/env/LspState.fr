module ch.fhnw.lsp.env.LspState where

import ch.fhnw.lsp.messages.GeneralLspTypes (URI)
import Data.HashMap
import Compiler.types.Global (Global, Options, SubSt)
import ch.fhnw.lsp.logger.Logger

type ServerResult a = (ServerError | a)
data ServerError = Error String

initialState :: Monad m => Logger m -> LspState m
initialState logger = LspState {
  rootPath        = report "No root path provided"
, globals         = empty
, projectGlobal   = Nothing
, logger          = logger
}

data LspState m = LspState { 
  rootPath      :: ServerResult URI 
, globals       :: HashMap URI Global
, projectGlobal :: Maybe Global
, logger        :: Logger m
}

report :: String -> ServerResult a
report = Left . Error

asServerResult :: (String | a) -> ServerResult a
asServerResult (Right a) = Right a
asServerResult (Left e)  = report e

setGlobals :: Monad m => HashMap URI Global -> LspState m -> LspState m
setGlobals globals st = st.{ globals = globals }

updateGlobals :: Monad m => HashMap URI Global -> LspState m -> LspState m
updateGlobals newGlobals st = st.{ globals = updated }
  where
    updated = union newGlobals st.globals

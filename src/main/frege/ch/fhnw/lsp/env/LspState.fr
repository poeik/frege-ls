module ch.fhnw.lsp.env.LspState where

import ch.fhnw.lsp.messages.GeneralLspTypes (URI)
import Data.HashMap
import Compiler.types.Global (Global, Options, SubSt)
import ch.fhnw.lsp.logger.Logger

initialState :: Monad m => Logger m -> LspState m
initialState logger = LspState {
  rootPath        = Left "No root path provided"
, globals         = empty
, projectGlobal   = Nothing
, logger          = logger
}

data LspState m = LspState { 
  rootPath      :: Either String URI 
, globals       :: HashMap URI Global
, projectGlobal :: Maybe Global
, logger        :: Logger m
}

setGlobals :: Monad m => HashMap URI Global -> LspState m -> LspState m
setGlobals globals st = st.{ globals = globals }

updateGlobals :: Monad m => HashMap URI Global -> LspState m -> LspState m
updateGlobals newGlobals st = st.{ globals = updated }
  where
    updated = union newGlobals st.globals
    
  
globals :: Monad m => LspState m -> HashMap URI Global
globals st = st.globals

projectGlobal :: LspState m -> Maybe Global
projectGlobal st = st.projectGlobal

rootPath :: Monad m => LspState m -> (String | URI)
rootPath st = st.rootPath

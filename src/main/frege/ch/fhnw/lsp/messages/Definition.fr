module ch.fhnw.lsp.messages.Definition where

import Data.JSON

processDefinitionMessage :: DefinitionRequestParams -> Location
processDefinitionMessage params = 
  Location { 
    uri   = params.textDocument.uri, 
    range = Range { 
      start = params.position.{ line = 0 },
      end   = params.position.{ line = 0 }
    }
  }

derive Show Location
derive Show Position
derive Show Range

data Location = Location {
  uri   :: String,
  range :: Range
}

data Range = Range {
  start :: Position,
  end   :: Position
}

data Position = Position {
  line      :: Int,
  character :: Int
}


instance FromJSON Location where
  fromJSON (Struct as) = do
    uri   <- field "uri" as
    range <- field "range" as
    pure Location { uri, range }
  fromJSON garbage = fail ("couldn't decode Location from: " ++ show garbage)

instance ToJSON Location where
  toJSON Location { uri, range } =
    Struct [ ("uri", toJSON uri)
           , ("range", toJSON range)
           ]

instance FromJSON Position where
  fromJSON (Struct as) = do
    line      <- field "line" as
    character <- field "character" as
    pure Position { line, character }
  fromJSON garbage = fail ("couldn't decode Position from: " ++ show garbage)

instance ToJSON Position where
  toJSON Position { line, character } =
    Struct [ ("line", toJSON line)
           , ("character", toJSON character)
           ]

instance FromJSON Range where
  fromJSON (Struct as) = do
    start <- field "start" as
    end   <- field "end" as
    pure Range { start, end }
  fromJSON garbage = fail ("couldn't decode Range from: " ++ show garbage)

instance ToJSON Range where
  toJSON Range { start, end } =
    Struct [ ("start", toJSON start)
           , ("end",   toJSON end)
           ]

data DefinitionRequestParams = DefinitionRequestParams {
  position     :: Position,
  textDocument :: TextDocument
}

data TextDocument = TextDocument {
  uri     :: String
}

instance FromJSON DefinitionRequestParams where
  fromJSON (Struct as) = do
    position     <- field "position" as
    textDocument <- field "textDocument" as
    pure DefinitionRequestParams { position, textDocument }
  fromJSON garbage = fail ("couldn't decode DefinitionRequestParams from: " ++ show garbage)

instance FromJSON TextDocument where
  fromJSON (Struct as) = do
    uri <- field "uri" as
    pure TextDocument { uri }
  fromJSON garbage = fail ("couldn't decode TextDocument from: " ++ show garbage)


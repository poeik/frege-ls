module ch.fhnw.lsp.messages.Messages where

import ch.fhnw.lsp.messages.initialize.Initialize
import ch.fhnw.lsp.messages.initialize.InitializeTypes
import ch.fhnw.lsp.messages.textdocument.Definition
import ch.fhnw.lsp.messages.textdocument.DefinitionTypes
import ch.fhnw.lsp.messages.GeneralLspTypes

import ch.fhnw.lsp.env.LspEnv
import ch.fhnw.lsp.logger.Logger

import Data.JSON

processMessage :: Monad m => Logger m -> Request -> LspEnv m Response
processMessage log (InitializeRequest id params) = fmap (InitializeResponse id) (processInitializeMessage log params)
processMessage log InitializedRequest            = pure EmptyResponse
processMessage log (DefinitionRequest id params) = pure $ (DefinitionResponse id) (processDefinitionMessage params)

-- All supported requests
data Request = InitializeRequest { id :: Int, initParams :: InitializeRequestParams } 
             | InitializedRequest 
             | DefinitionRequest { id :: Int, defParams  :: DefinitionRequestParams }

instance FromJSON Request where
  fromJSON (Struct as) = do
    method <- field "method" as
    case method of 
      "initialize" -> do
        id         <- field "id" as
        initParams <- field "params" as
        pure InitializeRequest { id, initParams }
      "initialized" -> do
        pure InitializedRequest
      "textDocument/definition" -> do
        id        <- field "id" as
        defParams <- field "params" as
        pure $ DefinitionRequest { id, defParams }
      unsupported -> do
        fail $ "Unsupported message with method \"" ++ unsupported ++ "\" received"
  fromJSON garbage = fail ("couldn't decode message from: " ++ show garbage)

-- all supported responses
data Response = InitializeResponse Int InitializeResult
              | DefinitionResponse Int Location 
              | EmptyResponse

derive Show Response

instance ToJSON Response where
  toJSON (InitializeResponse requestId result) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id"     , toJSON requestId),
              ("result" , toJSON result)
           ]
  toJSON EmptyResponse = Struct []
  toJSON (DefinitionResponse requestId location) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id"     , toJSON requestId),
              ("result" , toJSON location)
           ]

data Method = Method String

instance FromJSON Method where
  fromJSON (Struct as) = do
    method <- field "method" as
    pure $ Method method
  fromJSON garbage = fail ("couldn't decode Method: " ++ show garbage)


module ch.fhnw.lsp.messages.Messages where

import ch.fhnw.lsp.messages.initialize.Initialize(processInitializeMessage)
import ch.fhnw.lsp.messages.initialize.InitializeTypes(InitializeRequestParams, InitializeResult)
import ch.fhnw.lsp.messages.textdocument.definition.Definition(processDefinitionMessage)
import ch.fhnw.lsp.messages.textdocument.definition.DefinitionTypes(DefinitionRequestParams)
import ch.fhnw.lsp.messages.textdocument.didopen.DidOpen(processDidOpenNotification)
import ch.fhnw.lsp.messages.textdocument.didopen.DidOpenTypes(DidOpenRequestParams)
import ch.fhnw.lsp.messages.textdocument.didsave.DidSave(processDidSaveNotification)
import ch.fhnw.lsp.messages.textdocument.didsave.DidSaveTypes(DidSaveNotificationParams)
import ch.fhnw.lsp.messages.textdocument.completion.Completion(processCompletionRequest)
import ch.fhnw.lsp.messages.textdocument.completion.CompletionTypes(CompletionRequestParams, CompletionList)
import ch.fhnw.lsp.messages.textdocument.didchange.DidChangeTypes(DidChangeNotificationParams)
import ch.fhnw.lsp.messages.textdocument.didchange.DidChange(processDidChangeNotification)
import ch.fhnw.lsp.messages.textdocument.hover.HoverTypes(HoverRequestParams, HoverResult)
import ch.fhnw.lsp.messages.textdocument.hover.Hover(processHoverRequest)
import ch.fhnw.lsp.messages.exit.Exit(processExitNotification)
import ch.fhnw.lsp.messages.GeneralLspTypes(Location)

import ch.fhnw.lsp.env.LspEnv

import Data.JSON

processMessage :: Request -> LspEnv IO Response
processMessage (InitializeRequest id params)  = fmap (InitializeResponse id) (processInitializeMessage params)
processMessage InitializedRequest             = pure EmptyResponse
processMessage (DefinitionRequest id params)  = fmap (DefinitionResponse id) (processDefinitionMessage params)
processMessage (DidOpenNotification params)   = fmap (const EmptyResponse)   (processDidOpenNotification params)
processMessage (DidSaveNotification params)   = fmap (const EmptyResponse)   (processDidSaveNotification params)
processMessage (CompletionRequest id params)  = fmap (CompletionResponse id) (processCompletionRequest params)
processMessage (DidChangeNotification params) = fmap (const EmptyResponse)   (processDidChangeNotification params)
processMessage (HoverRequest id params)       = fmap (HoverResponse id)      (processHoverRequest params)
processMessage (ShutdownRequest id)           = pure (ShutdownResponse id) 
processMessage ExitNotification               = fmap (const EmptyResponse)   (processExitNotification)

-- All supported requests
data Request = InitializeRequest      { id :: Int, initParams       :: InitializeRequestParams } 
             | DefinitionRequest      { id :: Int, defParams        :: DefinitionRequestParams }
             | CompletionRequest      { id :: Int, completionParams :: CompletionRequestParams }
             | HoverRequest           { id :: Int, hoverParams      :: HoverRequestParams } 
             | DidOpenNotification    {            didOpenParams    :: DidOpenRequestParams }
             | DidSaveNotification    {            didSaveParams    :: DidSaveNotificationParams }
             | DidChangeNotification  {            didChangeParams  :: DidChangeNotificationParams }
             | InitializedRequest 
             | ShutdownRequest        { id :: Int } 
             | ExitNotification

instance FromJSON Request where
  fromJSON (Struct as) = do
    method <- field "method" as
    case method of 
      "initialize" -> do
        id         <- field "id" as
        initParams <- field "params" as
        pure InitializeRequest { id, initParams }
      "initialized" -> do
        pure InitializedRequest
      "textDocument/definition" -> do
        id        <- field "id" as
        defParams <- field "params" as
        pure DefinitionRequest { id, defParams }
      "textDocument/didOpen" -> do
        didOpenParams <- field "params" as
        pure DidOpenNotification { didOpenParams }
      "textDocument/didSave" -> do
        didSaveParams <- field "params" as
        pure DidSaveNotification { didSaveParams }
      "textDocument/completion" -> do
        id               <- field "id" as
        completionParams <- field "params" as
        pure CompletionRequest { id, completionParams }
      "textDocument/didChange" -> do
        didChangeParams <- field "params" as
        pure DidChangeNotification { didChangeParams }
      "textDocument/hover" -> do
        id          <- field "id" as
        hoverParams <- field "params" as
        pure HoverRequest { id, hoverParams }
      "shutdown" -> do
        id <- field "id" as
        pure ShutdownRequest { id }
      "exit" -> do
        pure ExitNotification
      unsupported -> do
        fail $ "Unsupported message with method \"" ++ unsupported ++ "\" received, message: " ++ show as
  fromJSON garbage = fail ("couldn't decode message from: " ++ show garbage)

-- all supported responses
data Response = InitializeResponse Int InitializeResult
              | DefinitionResponse Int Location 
              | CompletionResponse Int CompletionList
              | HoverResponse      Int HoverResult
              | ShutdownResponse   Int 
              | EmptyResponse

derive Show Response

instance ToJSON Response where
  toJSON (InitializeResponse requestId result) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id"     , toJSON requestId),
              ("result" , toJSON result)
           ]
  toJSON EmptyResponse = Struct []
  toJSON (DefinitionResponse requestId location) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id"     , toJSON requestId),
              ("result" , toJSON location)
           ]
  toJSON (CompletionResponse id completionList) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id",      toJSON id),
              ("result", toJSON completionList)
           ]
  toJSON (ShutdownResponse id) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id",      toJSON id)
           ]
  toJSON (HoverResponse id result) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id",      toJSON id),
              ("result", toJSON result)
           ]

data Method = Method String

instance FromJSON Method where
  fromJSON (Struct as) = do
    method <- field "method" as
    pure $ Method method
  fromJSON garbage = fail ("couldn't decode Method: " ++ show garbage)


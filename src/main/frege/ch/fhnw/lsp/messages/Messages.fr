module ch.fhnw.lsp.messages.Messages where

import ch.fhnw.lsp.messages.initialize.Initialize
import ch.fhnw.lsp.messages.initialize.model.InitializeRequest
import ch.fhnw.lsp.messages.initialize.model.InitializeResult
import ch.fhnw.lsp.messages.Definition

import ch.fhnw.lsp.env.LspEnv
import ch.fhnw.lsp.logger.Logger

import Data.JSON

processMessage :: Logger -> Request -> LspEnv Response
processMessage log (InitializeRequest id params) = fmap (InitializeResponse id) (processInitializeMessage log params)
processMessage log InitializedRequest            = pure EmptyResponse
processMessage log (DefinitionRequest id params) = pure $ (DefinitionResponse id) (processDefinitionMessage params)

-- All supported requests
data Request = InitializeRequest { id :: Maybe Int, params :: InitializeRequestParams } 
             | InitializedRequest 
             | DefinitionRequest { requestId :: Int, defParams :: DefinitionRequestParams }

instance FromJSON Request where
  fromJSON (Struct as) = do
    id     <- optional "id" as
    method <- field "method" as
    case method of 
      "initialize" -> do
        params <- field "params" as
        pure InitializeRequest { id, params }
      "initialized" -> do
        pure InitializedRequest
      "textDocument/definition" -> do
        id <- field "id" as
        defParams <- field "params" as
        pure $ DefinitionRequest { requestId = id, defParams = defParams }
      unsupported -> do
        fail $ "Unsupported message with method \"" ++ unsupported ++ "\" received"
  fromJSON garbage = fail ("couldn't decode message from: " ++ show garbage)

-- all supported responses
data Response = InitializeResponse (Maybe Int) InitializeResult
              | DefinitionResponse Int Location 
              | EmptyResponse

derive Show Response

instance ToJSON Response where
  toJSON (InitializeResponse requestId result) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id", maybeToJSON requestId),
              ("result", toJSON result)
           ]
  toJSON EmptyResponse = Struct []
  toJSON (DefinitionResponse requestId location) = 
    Struct [ 
              ("jsonrpc", toJSON "2.0"),
              ("id",      toJSON requestId),
              ("result",  toJSON location)
           ]

data Method = Method String

instance FromJSON Method where
  fromJSON (Struct as) = do
    method <- field "method" as
    pure $ Method method
  fromJSON garbage = fail ("couldn't decode Method: " ++ show garbage)


module ch.fhnw.lsp.messages.initialize.Initialize where

import Compiler.types.Global (Global, Options, SubSt)

import ch.fhnw.lsp.env.LspEnv
import ch.fhnw.lsp.env.LspState
import ch.fhnw.lsp.messages.initialize.InitializeTypes
import ch.fhnw.lsp.compile.CompileGlobal

processInitializeMessage :: InitializeRequestParams -> LspEnv IO InitializeResult
processInitializeMessage (init@(InitializeRequestParams _ _ _ _)) = do
  logInfo $ logClientInfos init
  global <- liftMonad standardCompileGlobal
  setGlobal global
  pure $ InitializeResult (ServerCapabilities True) (Just (ServerInfo "new Frege LSP" (Just $ "v0.0.1")))

logClientInfos ::  InitializeRequestParams -> String
logClientInfos (InitializeRequestParams pid client workspaceFolders rootUri) = let 
    clientInfos = case client of
      Just client -> " to " ++ client.name ++ maybe "" ((++) ", version ") client.version
      Nothing     -> ""
    root    = maybe "" (((++) ", rootUri: ") . show ) rootUri
    ws      = fromMaybe [] workspaceFolders
    folders = fold (\acc cur -> acc ++ ", " ++ show cur) "" ws
  in
    "Connected" ++ clientInfos ++ root ++ ", workspace folders: " ++ folders

setGlobal :: Monad m => Global -> LspEnv m ()
setGlobal = modify . setProjectGlobal

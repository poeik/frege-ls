module ch.fhnw.lsp.messages.initialize.Initialize where

import ch.fhnw.lsp.env.LspEnv
import ch.fhnw.lsp.env.LspState
import ch.fhnw.lsp.messages.initialize.InitializeTypes
import ch.fhnw.lsp.compile.CompileExecutorLSP(fromGradle, fromOptionsLSP)
import ch.fhnw.lsp.messages.GeneralLspTypes

processInitializeMessage :: InitializeRequestParams -> LspEnv IO InitializeResult
processInitializeMessage (init@(InitializeRequestParams _ _ _ _)) = do
  logInfo $ logClientInfos init
  let options = fromGradle "src/main/frege" ""
  rootDir <- liftResult $ readRootDir init.workspaceFolders
  global  <- liftMonad $ fromOptionsLSP options

  modify (\cur -> cur.{ projectGlobal = Just global, rootPath = Right rootDir })
  pure $ InitializeResult capabilities serverInfos

logClientInfos ::  InitializeRequestParams -> String
logClientInfos (InitializeRequestParams pid client workspaceFolders rootUri) = let 
    clientInfos = case client of
      Just client -> " to " ++ client.name ++ maybe "" ((++) ", version ") client.version
      Nothing     -> ""
    root    = maybe "" (((++) ", rootUri: ") . show ) rootUri
    ws      = fromMaybe [] workspaceFolders
    folders = fold (\acc cur -> acc ++ ", " ++ show cur) "" ws
  in
    "Connected" ++ clientInfos ++ root ++ ", workspace folders: " ++ folders

readRootDir :: Maybe [WorkspaceFolder] -> ServerResult URI
readRootDir (Just (_:_:_)) = report "The Frege language server does not support multi root projects"
readRootDir (Just (r:[]))  = Right r.uri
readRootDir _              = report "Please specify a root directory"

serverInfos :: Maybe ServerInfo
serverInfos = Just $ 
  ServerInfo { 
    name = "new Frege LSP"
  , version = Just "v0.0.1"
  }

capabilities :: ServerCapabilities 
capabilities = ServerCapabilities {
  definitionProvider = True 
, textDocumentSync   = TextDocumentSyncOptions {
    openClose = True
  , change = Full 
  }
}

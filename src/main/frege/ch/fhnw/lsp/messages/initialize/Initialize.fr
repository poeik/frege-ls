module ch.fhnw.lsp.messages.initialize.Initialize where

import Compiler.types.Global(Options())
import Java.IO as JIO()

import ch.fhnw.lsp.compile.CompileOptions(standardCompileOptions)
import ch.fhnw.lsp.effects.MonadLog(MonadLog(logInfo))
import ch.fhnw.lsp.effects.MonadInitialize(MonadInitialize(initializeEnvironment, setupCompileDir))
import ch.fhnw.lsp.env.LspState(report, ServerResult)
import ch.fhnw.lsp.env.App(AppResult, liftToApp)
import ch.fhnw.lsp.messages.initialize.InitializeTypes
import ch.fhnw.lsp.messages.GeneralLspTypes(URI())

processInitializeMessage :: 
  (
    MonadLog        m
  , MonadInitialize m
  ) => InitializeRequestParams -> AppResult m InitializeResult
processInitializeMessage (init@(InitializeRequestParams _ _ _ _)) = do
  logInfo $ clientInfosLog init
  let opt = standardCompileOptions
  setupCompileDir . compiledir $ opt
  rootDir <- liftToApp $ readRootDir init.workspaceFolders
  initializeEnvironment opt rootDir
  pure $ InitializeResult capabilities serverInfos
  where
    compiledir opt = JIO.File.new opt.dir

clientInfosLog ::  InitializeRequestParams -> String
clientInfosLog (InitializeRequestParams pid client workspaceFolders rootUri) = let 
    clientInfos = case client of
      Just client -> " to " ++ client.name ++ maybe "" ((++) ", version ") client.version
      Nothing     -> ""
    root    = maybe "" (((++) ", rootUri: ") . show ) rootUri
    ws      = fromMaybe [] workspaceFolders
    folders = fold (\acc cur -> acc ++ ", " ++ show cur) "" ws
  in
    "Connected" ++ clientInfos ++ root ++ ", workspace folders: " ++ folders

readRootDir :: Maybe [WorkspaceFolder] -> ServerResult URI
readRootDir (Just (_:_:_)) = report "The Frege language server does not support multi root projects"
readRootDir (Just (r:[]))  = Right r.uri
readRootDir _              = report "Please specify a root directory"

serverInfos :: Maybe ServerInfo
serverInfos = Just $ 
  ServerInfo { 
    name = "new Frege LSP"
  , version = Just "v0.0.1"
  }

capabilities :: ServerCapabilities 
capabilities = ServerCapabilities {
  definitionProvider = True 
, textDocumentSync   = TextDocumentSyncOptions {
    openClose = True
  , change = Full 
  , save = SaveOptions { includeText = True }
  }
, completionProvider = CompletionOptions {
    triggerCharacters = ["."]
  , resolveProvider   = False
  }
, hoverProvider = True
}

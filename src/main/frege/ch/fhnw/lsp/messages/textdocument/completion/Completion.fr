module ch.fhnw.lsp.messages.textdocument.completion.Completion where

import Control.concurrent.STM(atomically, TVar)
import Compiler.types.Tokens(Token, KeyTk)
import Compiler.types.Global(Global, Symbol, IdInfo)
import Data.HashMap(HashMap)
import Compiler.types.QNames(QName)

import ch.fhnw.lsp.env.LspEnv(LspEnv, logInfo, liftResult, access, liftIO)
import ch.fhnw.lsp.utils.Globals(findGlobal, readGlobals)
import ch.fhnw.lsp.utils.Utils(tokenAt)
import ch.fhnw.lsp.messages.textdocument.completion.CompletionTypes(CompletionList, CompletionItem, CompletionRequestParams)
import ch.fhnw.lsp.messages.textdocument.completion.RecordFieldCompletion(findMembers)
import ch.fhnw.lsp.messages.GeneralLspTypes(Position, URI)
import ch.fhnw.lsp.messages.textdocument.completion.ModuleMemberCompletion(findModuleMembers)

processCompletionRequest :: CompletionRequestParams -> LspEnv IO CompletionList
processCompletionRequest params =
  case params.context >>= _.triggerCharacter of
    Just "."  -> do
      -- We don't have the latest versions of the compiled files yet, 
      -- therefore we wait for the compiler to finish.
      waitForCompilation maxWaitForCompilationTime
      logInfo "analyzing completions"
      items <- completionList params
      pure CompletionList { isIncomplete = False, items = items }
    otherwise -> pure $ CompletionList { isIncomplete = False, items = [] }
  where
    maxWaitForCompilationTime = 5000

completionList :: CompletionRequestParams -> LspEnv IO [CompletionItem]
completionList params = do
  globals     <- readGlobals
  (token, sourceGlobal)   <- findToken params.position params.textDocument.uri globals
  case tokenToQName token sourceGlobal of
    -- lets find all members of the token
    Just qname -> pure $ findMembers qname sourceGlobal
    -- cannot resolve token. Try to load the members of the module 
    Nothing    -> findModuleMembers token sourceGlobal
    
findToken :: Position -> URI -> HashMap URI Global -> LspEnv IO (Token, Global)
findToken pos uri globals = do
  global <- liftResult $ findGlobal uri globals
  token <- liftResult $ tokenAt 
    pos.{character <- (\c -> c - 1)} -- we want the token before the `.`
    global
  pure (token, global)

tokenToQName :: Token -> Global -> Maybe QName
tokenToQName tok sourceGlobal = do
  case sourceGlobal.resolved tok of
    Just (Right qname) -> Just qname
    _ -> Nothing

{---
  This function reads the `watingForCompilation` state from `LspState`. If this
  TVar is set to `true` it blocks the current thread by sleeping for a short 
  period. Specify a suitable `maxWaitTime` which is the max amount of time 
  following computations in the monadic sequencing may be deferred.
-}
waitForCompilation :: Long -> LspEnv IO ()
waitForCompilation maxWaitTime
  | maxWaitTime < waitMsPerTry -> do 
      logInfo $ "Waited for " ++ "ms for compilation to complete, giving up."
  | otherwise -> do
      waiting <- waitingForCompilation 
      if waiting then do
        logInfo $ "Waiting for Compilation to complete"
        liftIO $ Thread.sleep waitMsPerTry
        waitForCompilation (maxWaitTime - waitMsPerTry)
      else pure ()
  where
    waitMsPerTry = 100
    waitingForCompilation = access _.waitForCompilation >>= (liftIO . atomically . TVar.read)


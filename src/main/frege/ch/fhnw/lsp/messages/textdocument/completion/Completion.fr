module ch.fhnw.lsp.messages.textdocument.completion.Completion where

import Compiler.types.Tokens(Token, KeyTk)
import Compiler.types.Global(Global, Symbol, IdInfo)
import Data.HashMap(HashMap)
import Compiler.types.QNames(QName)

import ch.fhnw.lsp.env.App(AppResult, liftToApp)
import ch.fhnw.lsp.effects.MonadEnv(MonadEnv())
import ch.fhnw.lsp.effects.MonadCompile(MonadCompile())
import ch.fhnw.lsp.effects.MonadGlobals(MonadGlobals(waitForCompilation, readGlobals))
import ch.fhnw.lsp.effects.MonadLog(MonadLog(logInfo))
import ch.fhnw.lsp.env.LspState(ServerResult)
import ch.fhnw.lsp.utils.Globals(findGlobal)
import ch.fhnw.lsp.utils.Utils(tokenAt)
import ch.fhnw.lsp.messages.textdocument.completion.CompletionTypes(CompletionList, CompletionItem, CompletionRequestParams)
import ch.fhnw.lsp.messages.textdocument.completion.RecordFieldCompletion(findMembers)
import ch.fhnw.lsp.messages.GeneralLspTypes(Position, URI)
import ch.fhnw.lsp.messages.textdocument.completion.ModuleMemberCompletion(findModuleMembers)

processCompletionRequest :: (
    MonadLog     m
  , MonadEnv     m
  , MonadCompile m
  ) => CompletionRequestParams -> AppResult m CompletionList
processCompletionRequest params =
  case params.context >>= _.triggerCharacter of
    Just "."  -> do
      -- We may not have the latest versions of the compiled files yet, 
      -- therefore we wait for the compiler to finish.
      waitForCompilation maxWaitForCompilationTime
      logInfo "analyzing completions"
      items <- completionList params
      pure CompletionList { isIncomplete = False, items = items }
    otherwise -> pure $ CompletionList { isIncomplete = False, items = [] }
  where
    maxWaitForCompilationTime = 5000

completionList :: (
    MonadEnv     m
  , MonadCompile m
  ) => CompletionRequestParams -> AppResult m [CompletionItem]
completionList params = do
  globals     <- readGlobals
  let pos = params.position.{character <- (\c -> c - 2)} -- we want the token two positions before the cursor (one position before the cursor is the `.`)
  (token, sourceGlobal)   <- liftToApp $ findTokenAtPositionInUri pos params.textDocument.uri globals
  case tokenToQName token sourceGlobal of
    -- lets find all members of the token
    Just qname -> pure $ findMembers qname sourceGlobal
    -- cannot resolve token. Try to load the members of the module 
    Nothing    -> findModuleMembers token sourceGlobal
    
findTokenAtPositionInUri :: Position -> URI -> HashMap URI Global -> ServerResult (Token, Global)
findTokenAtPositionInUri pos uri globals = do
  global <-  findGlobal uri globals
  token  <-  tokenAt pos global
  pure (token, global)

tokenToQName :: Token -> Global -> Maybe QName
tokenToQName tok sourceGlobal = do
  case sourceGlobal.resolved tok of
    Just (Right qname) -> Just qname
    _ -> Nothing

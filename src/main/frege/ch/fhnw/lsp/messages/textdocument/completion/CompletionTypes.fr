module ch.fhnw.lsp.messages.textdocument.completion.CompletionTypes where

import Data.JSON(FromJSON, ToJSON, Struct, field, optional)

import ch.fhnw.lsp.messages.GeneralLspTypes(TextDocument, Position)

data CompletionRequestParams = CompletionRequestParams {
  context      :: Maybe CompletionContext
, textDocument :: TextDocument
, position     :: Position
}
derive Show CompletionRequestParams

data CompletionContext = CompletionContext {
  triggerCharacter :: Maybe String
}
derive Show CompletionContext

data CompletionList = CompletionList {
  isIncomplete :: Bool
, items        :: [CompletionItem]
}
derive Show CompletionList

data CompletionItem = CompletionItem {
  label :: String
}
derive Show CompletionItem

-------------  FromJSON instances ------------- 

instance FromJSON CompletionContext where
  fromJSON (Struct as) = do
    triggerCharacter <- optional "triggerCharacter" as
    pure CompletionContext { triggerCharacter }
  fromJSON garbage = fail ("couldn't decode CompletionContext from: " ++ show garbage)

instance FromJSON CompletionRequestParams where
  fromJSON (Struct as) = do
    position     <- field "position" as
    textDocument <- field "textDocument" as
    context      <- optional "context" as
    pure CompletionRequestParams { context, position, textDocument }
  fromJSON garbage = fail ("couldn't decode CompletionRequestParams from: " ++ show garbage)


-------------  ToJSON instances ------------- 
instance ToJSON CompletionList where
  toJSON (CompletionList isIncomplete items) = 
    Struct [ 
              ("isIncomplete", toJSON isIncomplete),
              ("items"       , toJSON items),
           ]

instance ToJSON CompletionItem where
  toJSON (CompletionItem label) = 
    Struct [ ("label", toJSON label) ]

module ch.fhnw.lsp.messages.textdocument.completion.ModuleMemberCompletion where

import Compiler.types.Global(Global, Symbol, IdInfo)
import Compiler.types.NSNames(NSX)
import Compiler.types.SourceDefinitions(funbinding)
import Compiler.types.Tokens(Token, KeyTk)

import ch.fhnw.lsp.effects.MonadCompile(MonadCompile(compileFile))
import ch.fhnw.lsp.effects.MonadEnv(MonadEnv(projectRoot))
import ch.fhnw.lsp.effects.MonadGlobals(MonadGlobals(readGlobals))
import ch.fhnw.lsp.messages.GeneralLspTypes(URI())
import ch.fhnw.lsp.messages.textdocument.completion.CompletionTypes(CompletionItem(CompletionItem), CompletionItemKind(Function))
import ch.fhnw.lsp.utils.Documentation(documentSymbol)
import ch.fhnw.lsp.utils.Utils(note, asFail)

findModuleMembers :: (
    MonadCompile m
  , MonadEnv     m
  , MonadFail    m
  , MonadGlobals m
  ) => Token -> Global -> m [CompletionItem]
findModuleMembers token sourceGlobal = do
  target <- findGlobalForModule token.value sourceGlobal
  pure $ case target of
    Just g  -> symbolsInModule g
    Nothing -> []

symbolsInModule :: Global -> [CompletionItem]
symbolsInModule g = map buildCompletionItem (toQNames defs)
  where
    defs :: [Token]
    defs = [a
           | def <- g.sub.sourcedefs
           , (Just a) <- [funbinding def]
           ]
    toQNames :: [Token] -> [Symbol]
    toQNames tks = [sym
                   | tk <- tks
                   , Just (Right qname) <- [findIdInfo tk] 
                   , Just sym           <- [g.findit qname]
                   ]
    findIdInfo :: Token -> Maybe IdInfo
    findIdInfo = g.sub.idKind.lookup . KeyTk
    buildCompletionItem :: Symbol -> CompletionItem
    buildCompletionItem symbol = CompletionItem symbol.name.key Function (documentSymbol g symbol)

findGlobalForModule :: (
    MonadCompile m
  , MonadEnv     m
  , MonadFail    m
  , MonadGlobals m
  ) => String -> Global -> m (Maybe Global)
findGlobalForModule moduleName sourceGlobal = do
  uri  <- findFileUriForImportedModule moduleName sourceGlobal
  g    <- findOrLoadGlobal uri
  pure g

findFileUriForImportedModule :: (
    MonadEnv     m 
  , MonadFail    m
  , MonadGlobals m
  ) => String -> Global -> m URI
findFileUriForImportedModule moduleName sourceGlobal = do
  let mod = NSX moduleName
  globals     <- readGlobals ()
  rootPath    <- projectRoot () >>= note "Illegal state: Project root not set."
  pack <- case sourceGlobal.namespaces.lookup mod of 
    Nothing  -> fail ("Could not find module " ++ show moduleName)
    Just ps  -> pure ps
  uri  <- asFail $ rootPath.fromPackage sourceGlobal pack
  pure uri

findOrLoadGlobal :: (
    MonadCompile m
  , MonadGlobals m
  ) => URI -> m (Maybe Global)
findOrLoadGlobal uri = do
  globals <- readGlobals ()
  case (globals.lookup uri) of
    Just g  -> pure $ Just g
    Nothing -> compileFile uri


module ch.fhnw.lsp.messages.textdocument.didchange.DidChange where

import ch.fhnw.lsp.messages.textdocument.didchange.DidChangeTypes(DidChangeNotificationParams)
import ch.fhnw.lsp.env.LspEnv(LspEnv, logInfo, liftIO, access, get, runLspEnv, modify)
import ch.fhnw.lsp.env.LspState(setWaitForCompilation)
import ch.fhnw.lsp.utils.Globals(compileInMemoryAndUpdateURIGlobals)
import ch.fhnw.lsp.utils.Utils(joinedBy)

import Java.Lang(Runnable)

data DebouncedAction = native ch.fhnw.lsp.messages.textdocument.didchange.DebouncedAction where
  native new      :: Int -> IOMutable DebouncedAction 
  native trigger  :: MutableIO DebouncedAction -> MutableIO Runnable -> IO ()
  native shutdown :: MutableIO DebouncedAction -> IO ()

processDidChangeNotification :: DidChangeNotificationParams -> LspEnv IO ()
processDidChangeNotification params = do
  state     <- get
  debouncer <- liftIO $ DebouncedAction.new 200
  runnable  <- liftIO $ Runnable.new
    (do
      let content = (head params.contentChanges).text
      let text = dropTrailingDots content
      _ <- runLspEnv state (compileInMemoryAndUpdateURIGlobals params.textDocument.uri text)
      pure ()
    )
  liftIO $ debouncer.trigger runnable
  pure ()

dropTrailingDots :: String -> String
dropTrailingDots text = (map removeTrailingDot lines) `joinedBy` "\r\n"
  where 
    lines = toList $ strSplit text "\\R"

removeTrailingDot line
  | strEndsWith line "." -> substring line 0 (line.length - 1)
  | otherwise            -> line

pure native strSplit split       :: String -> String -> JArray String
pure native strEndsWith endsWith :: String -> String -> Bool
pure native substring substring  :: String -> Int -> Int -> String


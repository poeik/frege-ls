module ch.fhnw.lsp.messages.textdocument.didopen.DidOpen where

import ch.fhnw.lsp.messages.GeneralLspTypes(URI())
import ch.fhnw.lsp.messages.textdocument.didopen.DidOpenTypes(DidOpenRequestParams())
import ch.fhnw.lsp.messages.textdocument.publishdiagnostics.PublishDiagnostics(publishDiagnosticsNotification)

import ch.fhnw.lsp.effects.MonadEnv(MonadEnv())
import ch.fhnw.lsp.effects.MonadLog(MonadLog(logInfo))
import ch.fhnw.lsp.effects.MonadSendMessage(MonadSendMessage())
import ch.fhnw.lsp.effects.MonadCompile(MonadCompile(compileFile))
import ch.fhnw.lsp.effects.MonadDebounce(MonadDebounce(compileDebounced))
import ch.fhnw.lsp.effects.MonadGlobals(MonadGlobals())

processDidOpenNotification :: 
  (
    MonadCompile     m
  , MonadDebounce    m
  , MonadEnv         m
  , MonadFail        m
  , MonadGlobals     m
  , MonadLog         m
  , MonadSendMessage m
  ) => DidOpenRequestParams -> m ()
processDidOpenNotification params = do
  logInfo $ "opened: " ++ show params.textDocument.uri.path
  compileDebounced $ do
    maybeGlobal <- compileFile params.textDocument.uri
    case maybeGlobal of 
      Just g  -> publishDiagnosticsNotification params.textDocument.uri (Just params.textDocument.version)
      Nothing -> pure ()

module ch.fhnw.lsp.messages.textdocument.publishdiagnostics.PublishDiagnostics where

import Compiler.types.Global(Global, Message, Severity(HINT, WARNING, ERROR))
import Compiler.types.Positions as P()

import ch.fhnw.lsp.effects.MonadLog(MonadLog(logInfo))
import ch.fhnw.lsp.effects.MonadGlobals(MonadGlobals(readGlobals))
import ch.fhnw.lsp.effects.MonadSendMessage(MonadSendMessage(sendServerMessage))
import ch.fhnw.lsp.env.App(AppResult, liftToApp)

import ch.fhnw.lsp.utils.Globals(findGlobal)
import ch.fhnw.lsp.messages.textdocument.publishdiagnostics.PublishDiagnosticsTypes(Diagnostic, DiagnosticSeverity(Hint, Warning, Error), PublishDiagnosticsParams)
import ch.fhnw.lsp.messages.GeneralLspTypes(Range(Range), Position(Position), URI(), FileVersion())
import ch.fhnw.lsp.messages.MessageTypes(ServerMessage(PublishDiagnosticsNotification))

publishDiagnosticsNotification :: (
    MonadLog         m, 
    MonadSendMessage m, 
    MonadGlobals     m
  ) => URI -> Maybe FileVersion -> AppResult m ()
publishDiagnosticsNotification uri version = do
  globals <- readGlobals
  global <- liftToApp $ findGlobal uri globals 
  logInfo $ "publishing " ++ (show . length) global.sub.messages ++ " diagnostics for " ++ show uri.path
  let params = diagnosticParams uri version global.sub.messages
  sendServerMessage (PublishDiagnosticsNotification params)

diagnosticParams :: URI -> Maybe FileVersion -> [Message] -> PublishDiagnosticsParams
diagnosticParams uri version messages = 
    PublishDiagnosticsParams {
      uri         = uri
    , version     = version
    , diagnostics = diagnostics
    }
    where
      diagnostics = map messageToDiagnostic messages

messageToDiagnostic :: Message -> Diagnostic
messageToDiagnostic message = Diagnostic {
  range    = positionToRange message.pos
, severity = fregeSeverityToDiagnosticSeverity message.level
, message  = message.text
, source   = "freege"
}

fregeSeverityToDiagnosticSeverity :: Severity -> DiagnosticSeverity
fregeSeverityToDiagnosticSeverity HINT    = Hint
fregeSeverityToDiagnosticSeverity WARNING = Warning
fregeSeverityToDiagnosticSeverity ERROR   = Error

positionToRange :: P.Position -> Range
positionToRange position = Range { start, end } 
  where 
    start = Position { line = position.first.line , character = position.first.col }
    end   = Position { line = position.last.line  , character = position.last.col + position.last.length }

module ch.fhnw.lsp.messages.textdocument.publishdiagnostics.PublishDiagnostics where

import Compiler.types.Global(Global, Message, Severity(HINT, WARNING, ERROR))
import Compiler.types.Positions as P()

import ch.fhnw.lsp.utils.Globals(findOrLoadGlobal)
import ch.fhnw.lsp.env.LspEnv(LspEnv, logInfo, liftMonad, liftResult, access)
import ch.fhnw.lsp.env.LspState(ServerResult, asServerResult)
import ch.fhnw.lsp.messages.textdocument.publishdiagnostics.PublishDiagnosticsTypes(Diagnostic, DiagnosticSeverity(Hint, Warning, Error), PublishDiagnosticsParams)
import ch.fhnw.lsp.messages.GeneralLspTypes(Range, Position, URI, FileVersion)
import ch.fhnw.lsp.io.IO(sendServerMessage)
import ch.fhnw.lsp.messages.MessageTypes(ServerMessage(PublishDiagnosticsNotification))

publishDiagnosticsNotification :: URI -> Maybe FileVersion -> LspEnv IO ()
publishDiagnosticsNotification uri version = do
  maybeGlobal <- findOrLoadGlobal uri
  case maybeGlobal of
    Nothing     -> logInfo $ "No global found for " ++ show uri.path
    Just global -> do 
      logInfo $ "publishing " ++ (show . length) global.sub.messages ++ " diagnostics for " ++ show uri.path
      params <- liftResult $ diagnosticParams uri version global.sub.messages
      liftMonad $ sendServerMessage (PublishDiagnosticsNotification params)

diagnosticParams :: URI -> Maybe FileVersion -> [Message] -> ServerResult PublishDiagnosticsParams
diagnosticParams uri version messages = do 
  let diagnostics = map messageToDiagnostic messages
  pure PublishDiagnosticsParams {
    uri         = uri
  , version     = version
  , diagnostics = diagnostics
  }

messageToDiagnostic :: Message -> Diagnostic
messageToDiagnostic message = Diagnostic {
  range    = positionToRange message.pos
, severity = fregeSeverityToDiagnosticSeverity message.level
, message  = message.text
, source   = "freege"
}

fregeSeverityToDiagnosticSeverity :: Severity -> DiagnosticSeverity
fregeSeverityToDiagnosticSeverity HINT    = Hint
fregeSeverityToDiagnosticSeverity WARNING = Warning
fregeSeverityToDiagnosticSeverity ERROR   = Error

positionToRange :: P.Position -> Range
positionToRange position = Range { start, end } 
  where 
    start = Position { line = position.first.line , character = position.first.col }
    end   = Position { line = position.last.line  , character = position.last.col + position.last.length }

module ch.fhnw.lsp.utils.Globals where

import Compiler.types.Global(Global)
import Compiler.types.NSNames(NSX)
import Control.concurrent.STM(atomically, TVar)
import Java.IO(File)

import ch.fhnw.lsp.messages.GeneralLspTypes(URI)
import ch.fhnw.lsp.utils.Utils(note)
import ch.fhnw.lsp.env.LspEnv
import ch.fhnw.lsp.env.LspState
import ch.fhnw.lsp.compile.CompileExecutorLSP
import ch.fhnw.lsp.utils.Utils(joinedBy)

import Data.HashMap

compileFileAndUpdateURIGlobals :: URI -> LspEnv IO (Maybe Global)
compileFileAndUpdateURIGlobals openedUri = do
    exists <- fileExists openedUri
    if exists then do
      logInfo $ "Compiling: " ++ openedUri.getPath
      pglobal    <- access _.projectGlobal >>= hushMaybe
      newGlobals <- liftIO $ compileMakeLSP openedUri.getPath pglobal
      updateURIGlobals newGlobals openedUri
    else do
      logInfo $ "File \"" ++ openedUri.getPath ++ "\" does not exist"
      pure Nothing
    where 
      fileExists :: URI -> LspEnv IO Bool
      fileExists u = liftIO file.exists 
        where 
          file = File.new u.getPath

compileInMemoryAndUpdateURIGlobals :: URI -> String -> LspEnv IO (Maybe Global)
compileInMemoryAndUpdateURIGlobals openedUri sourceCode = do
    pglobal    <- access _.projectGlobal >>= hushMaybe
    newGlobals <- liftIO $ compileMakeLSPInMemory openedUri.getPath sourceCode pglobal
    updateURIGlobals newGlobals openedUri

updateURIGlobals :: [Global] -> URI -> LspEnv IO (Maybe Global)
updateURIGlobals newGlobals openedUri = do
    logInfo $ "Adding " ++ show newGlobals.length ++ " globals: " ++ ((map (\g -> g.sub.thisPack.raw) newGlobals)) `joinedBy` ", "
    rootPath   <- access _.rootPath >>= liftResult
    let kv         = map (\g -> (URI.fromGlobal rootPath g, g)) newGlobals
    let globalsMap = fromList $ dropLefts kv
    st <- get
    liftIO $ updateGlobals globalsMap st
    updated <- readGlobals
    logInfo $ "All loaded globals: " ++ (show . keys) updated
    liftEither $ Right (lookup openedUri updated)
  where
    dropLefts :: [((String | URI), Global)] -> [(URI, Global)]
    dropLefts xs = [ (uri, g) | (Right uri, g) <- xs ]

findGlobal :: URI -> HashMap URI Global -> ServerResult Global
findGlobal uri globals = note Error "No global for given URI found" $ globals.lookup uri

findOrLoadGlobal :: URI -> LspEnv IO (Maybe Global)
findOrLoadGlobal uri = do
  globals <- readGlobals
  case (findGlobal uri globals) of
    Right !g -> pure $ Just g
    otherwise -> compileFileAndUpdateURIGlobals uri

findGlobalForModule :: String -> Global -> LspEnv IO (Maybe Global)
findGlobalForModule moduleName sourceGlobal = do
  uri  <- findFileUriForImportedModule moduleName sourceGlobal
  g    <- findOrLoadGlobal uri
  pure g

findFileUriForImportedModule :: String -> Global -> LspEnv IO URI
findFileUriForImportedModule moduleName sourceGlobal = do
  let mod = NSX moduleName
  globals     <- access _.globals
  projectRoot <- access _.rootPath >>= liftResult
  pack <- liftResult $ case sourceGlobal.namespaces.lookup mod of 
    Nothing  -> report ("Could not find module " ++ show mod)
    Just ps  -> pure ps
  uri  <- liftResult . asServerResult $ projectRoot.fromPackage sourceGlobal pack
  pure uri

readGlobals :: LspEnv IO (HashMap URI Global)
readGlobals = do
  globals <- access _.globals
  liftIO $ atomically globals.read

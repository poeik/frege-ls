module ch.fhnw.lsp.utils.Globals where

import Compiler.types.Global(Global)

import ch.fhnw.lsp.messages.GeneralLspTypes(URI)
import ch.fhnw.lsp.utils.Utils(note)
import ch.fhnw.lsp.env.LspEnv
import ch.fhnw.lsp.env.LspState
import ch.fhnw.lsp.compile.CompileExecutorLSP

import Data.HashMap

updateURIGlobals :: URI -> LspEnv IO (Maybe Global)
updateURIGlobals openedUri = do
    pglobal    <- access _.projectGlobal >>= hushMaybe
    newGlobals <- liftIO $ compileMakeLSP openedUri.getPath pglobal
    logInfo $ "amt new globals: " ++ ((show . length) newGlobals)
    rootPath   <- access _.rootPath >>= liftResult
    let kv         = map (\g -> (URI.fromGlobal rootPath g, g)) newGlobals
    let globalsMap = fromList $ dropLefts kv
    modify $ updateGlobals globalsMap
    updatedGlobals <- access _.globals
    logInfo $ "sources: " ++ (show . keys) updatedGlobals
    liftEither $ Right (lookup openedUri updatedGlobals)
  where
    dropLefts :: [((String | URI), Global)] -> [(URI, Global)]
    dropLefts xs = [ (uri, g) | (Right uri, g) <- xs ]


findGlobal :: URI -> HashMap URI Global -> ServerResult Global
findGlobal uri globals = note Error "No global for given URI found" $ globals.lookup uri

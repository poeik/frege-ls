module ch.fhnw.lsp.utils.compile.DebouncedCompile where

import ch.fhnw.lsp.env.LspEnv(LspEnv, liftIO, runLspEnv, get)
import ch.fhnw.lsp.env.LspState(setWaitForCompilation)
import ch.fhnw.lsp.utils.Utils(joinedBy)

import Java.Lang(Runnable)

data CompileDebouncer = native ch.fhnw.lsp.utils.compile.CompileDebouncer where
  native new      :: Int -> IOMutable CompileDebouncer 
  native trigger  :: MutableIO CompileDebouncer -> MutableIO Runnable -> IO ()
  native shutdown :: MutableIO CompileDebouncer -> IO ()

compileDebounced :: LspEnv IO () -> LspEnv IO ()
compileDebounced toRun = do
  state     <- get
  debouncer <- liftIO $ CompileDebouncer.new 200
  runnable  <- liftIO $ Runnable.new
    (do
      _ <- runLspEnv state toRun
      pure ()
    )
  liftIO $ debouncer.trigger runnable
  liftIO $ setWaitForCompilation True state

dropTrailingDots :: String -> String
dropTrailingDots text = (map removeTrailingDot lines) `joinedBy` "\r\n"
  where 
    lines = toList $ strSplit text "\\R"

    removeTrailingDot line
      | strEndsWith line "." -> substring line 0 (line.length - 1)
      | otherwise            -> line

pure native strSplit split       :: String -> String -> JArray String
pure native strEndsWith endsWith :: String -> String -> Bool
pure native substring substring  :: String -> Int -> Int -> String

